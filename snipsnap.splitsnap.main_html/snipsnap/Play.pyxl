Play
════════════════════════════════════════════════════════════════════════

const OUTLINE_COLOR = rgb(1,1,1)
const TILE_GAP = 1
const TILE_SIZE = xy(10, 50)
const SPLIT_GAP_SIZE = 10
const TEXT_OFFSET = xy(0, TILE_SIZE.y/2 + 2)
const CLOSE_LERP_AMOUNT = 0.16
const MATCH_HOLD_FRAMES_BEFORE_TRIGGER = 10
const MATCH_HOLD_FRAMES_BEFORE_CLEAR = 10
const BG_COLOR = rgb(20%, 60%, 90%)
const MATCH_COLOR = rgb(20%, 90%, 60%)
const NO_MATCH_COLOR = rgb(90%, 60%, 20%)
const X_RADIUS = 70
const X_WIDTH = 40
const O_SIZE = 75

const COLOR_MAP = {
    0: rgb(1,0,0),
    1: rgb(0,1,0),
    2: rgb(0,0,1),
    3: rgb(1,0,1),
    4: rgb(1,1,0),
    5: rgb(0,1,1),
}
const COLORS = keys(COLOR_MAP)

const STACK = []

const INITIAL_STACK_SIZE = 10


debug_print(STACK)

// stack origin
let pos = SCREEN_SIZE/2

let split_pos = floor(size(STACK)/2)

let gap_size_actual = SPLIT_GAP_SIZE
let gap_size_target = SPLIT_GAP_SIZE

let y_down_frame = nil

def check_match():
    if (STACK[split_pos] == STACK[split_pos - 1]):
        return true
    else:
        return false

const X_TOP_LFT = SCREEN_SIZE/2 + xy(-X_RADIUS, -X_RADIUS)
const X_TOP_RGT = SCREEN_SIZE/2 + xy( X_RADIUS, -X_RADIUS)
const X_BOT_LFT = SCREEN_SIZE/2 + xy(-X_RADIUS,  X_RADIUS)
const X_BOT_RGT = SCREEN_SIZE/2 + xy( X_RADIUS,  X_RADIUS)

def reset_game_fn():
    remove_all(STACK)
    for 0 <= i < INITIAL_STACK_SIZE:
        push(STACK, random_value(COLORS))


reset_game_fn()


frame
────────────────────────────────────────────────────────────────────────
// BG - the clearest of blue skies
set_background(BG_COLOR)

debug_watch(joy.x)
debug_watch(joy.y)

if joy.xx and joy.y == 0:
    split_pos += joy.xx
if joy.yy > 0:
    y_down_frame = mode_frames
if y_down_frame and joy.y > 0:
    gap_size_target = 0
    if ((mode_frames - y_down_frame) > MATCH_HOLD_FRAMES_BEFORE_TRIGGER):
        if (check_match()):
            draw_disk(SCREEN_SIZE/2, O_SIZE, MATCH_COLOR)
            draw_disk(SCREEN_SIZE/2, O_SIZE - X_WIDTH, BG_COLOR)
            if (mode_frames - y_down_frame) > MATCH_HOLD_FRAMES_BEFORE_CLEAR:
                remove_key(STACK ,split_pos-1)
                remove_key(STACK ,split_pos)
                split_pos -= 1
                y_down_frame = nil
        else:
            draw_line(X_TOP_LFT, X_BOT_RGT, NO_MATCH_COLOR, 0, X_WIDTH)
            draw_line(X_BOT_LFT, X_TOP_RGT, NO_MATCH_COLOR, 0, X_WIDTH)

else:
    if joy.y > 0:
        gap_size_target = SPLIT_GAP_SIZE/2
    else:
        gap_size_target = SPLIT_GAP_SIZE
    y_down_frame = nil

if joy.aa:
    //reverse the left
    const left_tiles = slice(STACK, 0, split_pos)
    reverse(left_tiles)
    for t at i in left_tiles:
        STACK[i] = t

if joy.bb:
    // reverse the right
    const right_tiles = slice(STACK, split_pos)
    reverse(right_tiles)

    for t at i in right_tiles:
        STACK[i+split_pos] = t

if joy.dd:
    reset_game_fn()

gap_size_actual = lerp(
    gap_size_actual,
    gap_size_target,
    CLOSE_LERP_AMOUNT
)

split_pos = floor(min(size(STACK) - 1, max(1, split_pos)))

// top text
draw_text(
    font,
    CREDITS.title,
    xy(SCREEN_SIZE.x/2, 10),
    TEXT_COLOR,
    nil,
    nil,
    0,
    0
)

// bottom text
draw_text(
    font,
    replace("(d) reset", gamepad_array[0].prompt),
    xy(SCREEN_SIZE.x/2, SCREEN_SIZE.y - 10),
    TEXT_COLOR,
    nil,
    nil,
    "center",
    "bottom",
)

// draw_disk(pos, 10, rgb(0,0,0), nil, 10)
//
// const left_tiles = split_pos
// debug_watch(left_tiles)
// const left_group_center = (
//     pos 
//     - xy(gap_size_actual/2, 0) 
//     - 2 * xy(TILE_SIZE.x + TILE_GAP * left_tiles/2, 0)
// )
// draw_disk(left_group_center, 10, rgb(0,0,1), nil, 10)
//
// const right_tiles = size(STACK) - split_pos
// debug_watch(right_tiles)
// const right_group_center = (
//     pos 
//     + xy(gap_size_actual/2, 0) 
//     + 2 * xy(TILE_SIZE.x + TILE_GAP * right_tiles/2, 0)
// )
// draw_disk(right_group_center, 10, rgb(0,0,1), nil, 10)
//


// stack
const off = xy(
    (
        gap_size_actual 
        + (TILE_GAP + TILE_SIZE.x) * size(STACK) 
    ) / 2
    ,
    0
)
let p = clone(pos) - off
debug_watch(p)
debug_watch(off)
p -= xy(gap_size_actual / 2, 0)

// draw bottom left text label
draw_text(
    font,
    replace("(a)\nspin", gamepad_array[0].prompt),
    p + TEXT_OFFSET, 
    TEXT_COLOR,
    nil,
    nil,
    "middle",
    "top"
)

for c at i in STACK:
    if i == split_pos:
        draw_text(
            font,
            replace("[v]\nsnap", gamepad_array[0].prompt),
            p + TEXT_OFFSET + xy(gap_size_actual/4, 0),
            TEXT_COLOR,
            nil,
            nil,
            "middle",
            "top",
        )
        p += 2*xy(gap_size_actual, 0)
    draw_rect(p, TILE_SIZE, COLOR_MAP[c], OUTLINE_COLOR)
    if i < size(STACK) - 1:
        p += xy(TILE_SIZE.x + TILE_GAP, 0)

// draw bottom left text label
draw_text(
    font,
    replace("(b)\nspin", gamepad_array[0].prompt),
    p + TEXT_OFFSET,
    TEXT_COLOR,
    nil,
    nil,
    "middle",
    "top",
)
