Play
════════════════════════════════════════════════════════════════════════

const DUST = []

// todo move stuff into enter instead of init

const GRID_CENTER_px = SCREEN_SIZE / 2

const LEVEL_PARSE_DEBUG_MESSAGES = false

let PHYSICS = make_physics(
    {
        gravity: xy(0, 0)
    }
)

ACCELERATION_PROFILES["gridpusher"] = {
    max_velocity: 1.35,
    num_frames_attack: 3,
    num_frames_release: 8,
}

const PLAYER_CONTACT_MASK = 0b001
const PLAYER = make_entity(
    {
        name: "Player",
        pos: xy(0, 0),
        vel: xy(0, 0),
        accel: {
            "x": make_accelerator_from_profile("gridpusher"),
            "y": make_accelerator_from_profile("gridpusher"),
        },
        size: xy(2,2),
        sprite: astronaut.idle[0],
        z: 1,
        contact_category_mask: PLAYER_CONTACT_MASK,
        push_counter: xy(0, 0),
    }
)

def asciify_level(game_grid):
    const play_cell_coord = grid_coord_xy_from_wpos(game_grid, PLAYER.pos)
    debug_watch(play_cell_coord)
    let result = "\n"
    for y < game_grid.size.y:
        for x < game_grid.size.x:
            if x == play_cell_coord.x and y == play_cell_coord.y:
                result += "P"
                continue
            const coord = xy(x,y)
            const c = grid_cell_xy(game_grid, coord)
            if c.occupied_by:
                result += c.occupied_by.ascii
            else: 
                result += "."
        result += "\n"

    return result

def make_cell(coord, flatcoord, game_grid, cell_size_px):
    return {
        occupied_by: nil,
        coord: coord,
        flat: flatcoord,
        GAME_GRID: game_grid,
        pos: xy(
            cell_size_px.x * coord.x,
            cell_size_px.y * coord.y
        ) + GRID_CENTER_px - game_grid.size_px/2 + cell_size_px/2
    }

let GAME_GRID = nil

def set_player_start(game_grid, coord):
    game_grid.current_cell = coord
    PLAYER.pos = clone(grid_cell_xy(game_grid, coord).pos)

def add_barrier(game_grid, cell):
    let wall_ind = cell.flat mod size(wall_sprite)
    return {
        "sprite": wall_sprite[wall_ind][0],
        pos: cell.pos,
    }


def add_block(game_grid, cell):
    return {
        "sprite": block_2_sprite[0][0],
        "pushes": 2,
        "frame": 0,
        "pos": cell.pos,
        "name": "block",
        "sprite_by_pushes": [
            block_2_sprite[2][0],
            block_2_sprite[1][0],
            block_2_sprite[0][0],
        ],
    }

def advance_levels(goal_cell):
    // todo: maybe a transition?

    const goal = goal_cell.occupied_by

    if goal.goal_target != nil:
        debug_print("goal: ", goal.goal_target)
        GAME_GRID = load_level_by_name(LEVELS.levels, goal.goal_target)
    else:
        CURRENT_LEVEL += 1
        GAME_GRID = load_level_by_number(LEVELS.level_order, CURRENT_LEVEL)

def add_goal(game_grid, cell, target):
    cell.visibility = true
    push(game_grid.goals, cell)

    return {
        "goal": true,
        "goal_target": target,
        "sprite": goal_sprite[0][0],
        "overlap_fn":advance_levels,
        "pos": cell.pos,
    }

def activate_blue_key(cell):
    GAME_GRID.player_has_blue_key = true
    physics_remove_entity(PHYSICS, cell.occupied_by)
    cell.occupied_by = nil
    for cell in GAME_GRID.cells:
        if cell.occupied_by and cell.occupied_by.name == "blue_door":
            cell.occupied_by.sprite = blue_door_sprite["open"][0]
            physics_remove_entity(PHYSICS, cell.occupied_by)

def activate_grabber(cell):
    GAME_GRID.player_has_grabber = true
    physics_remove_entity(PHYSICS, cell.occupied_by)
    cell.occupied_by = nil

def add_blue_key(game_grid, cell):
    return {
        "sprite": blue_key_sprite[0][0],
        "overlap_fn": activate_blue_key,
        pos: cell.pos,
    }

def add_blue_door(game_grid, cell):
    return {
        "sprite": blue_door_sprite["closed"][0],
        pos: cell.pos,
        name: "blue_door",
    }

def add_grabber(game_grid, cell):
    return {
            "sprite": grabber_sprite[0][0],
            "overlap_fn": activate_grabber,
            pos: cell.pos
        }

let LAST_FOUND = []
def player_fn_pull(game_grid):
    remove_all(LAST_FOUND)
    const player_pos = clone(grid_coord_xy_from_wpos(GAME_GRID, PLAYER.pos))

    for dir in [
        xy(-1, 0),
        xy(1, 0),
        xy(0, 1),
        xy(0, -1),
    ]:
        let current = clone(player_pos)
        let next = current + dir
        while (
                grid_cell_xy(game_grid, next) 
                and grid_cell_xy(game_grid, next).occupied_by == nil
        ):
            current = clone(next)
            next = next + dir

        push(LAST_FOUND, next)
        
        const to_cell = grid_cell_xy(game_grid, current)
        const from_cell = grid_cell_xy(game_grid, next)

        if (
                from_cell.occupied_by.pushes != nil
                and to_cell.occupied_by == nil
                and (
                    to_cell.coord.x != player_pos.x
                    or to_cell.coord.y != player_pos.y
                )
        ):
            move_object(from_cell, to_cell)
            for i < 6:
                let pos = (
                    CELL_SIZE_PX/2 * random_within_square() + from_cell.pos
                )
                push(DUST, {p: pos, f: mode_frames, l: 10, d:-dir})


// values are functions of signature (coord: xy()) <- grid cell coordinates
// where they appear
const LEVEL_ENTRY_KEY = { 
    "P": set_player_start,
}

const LEVEL_ENTITY_KEY = {
    "#": add_barrier,
    "*": add_block,
    "O": add_goal,
    "b": add_blue_key,
    "B": add_blue_door,
    "g": add_grabber,
}

def grid_size_of(lvl):
    // make sure there are layers in the level
    assert(size(lvl) != 0)
    const lyr = lvl
    debug_print(lvl)
    const lines = split(lyr, "\n")

    // assert it has a level defined
    assert(size(lines) != 0 and size(lines) != nil)

    // assert that the lines have stuff_to_hash
    assert(size(lines[0]) != 0 and size(lines[0]) != nil)
    return xy(size(lines[0]), size(lines))

def load_level_by_number(level_order, l_num):
    return load_level_by_name(LEVELS.levels, level_order[l_num])

def load_level_by_name(levels, level_name):
    debug_print("loading level: ", level_name)
    CURRENT_LEVEL = find(LEVELS.level_order, level_name)
    remove_all(UNDOSTACK)
    LAST_UNDO_HASH = nil

    const lvl = levels[level_name]
    physics_remove_all(PHYSICS)
    physics_add_entity(PHYSICS, PLAYER)

    debug_print(lvl)

    const g_size = grid_size_of(lvl)
    assert(g_size)
    debug_print(g_size)

    let result = make_grid(g_size, make_cell, CELL_SIZE_PX, GRID_CENTER_px)

    const key = lvl.key

    // for layer in lvl.layers:
    const lines = split(lvl, "\n")
    debug_print(lines)
    for line at y in lines:
        for char at x in line:
            let meta_string = nil

            // handle goals and the meta table
            if contains("0123456789", char):
                debug_print("goal: ", char)
                meta_string = LEVELS.levels_meta[level_name][char]
                debug_print("goal: ", meta_string)
                char = "O"

            let fn = LEVEL_ENTRY_KEY[char]
            if fn != nil:
                // debug_print(char)
                fn(result, xy(x, y))
            else:
                fn = LEVEL_ENTITY_KEY[char] 
                if fn == nil:
                    continue
                const coord = xy(x, y)
                debug_print("adding " + char + " at: ", coord)
                let cell = grid_cell_xy(result, coord)
                const ent = make_entity(fn(result, cell, meta_string))
                ent.ascii = char

                // pushes will be handled outside of simulation, just using sim
                // for movement and collision
                ent.density = infinity

                cell["occupied_by"] = physics_add_entity(PHYSICS, ent)

    // make sure that the start location was parsed correctly
    assert(
        "Current cell is nil - probably means the level is missing a player "
        + "start or the key isn't what is in the level description"
        and result.current_cell != nil
    )

    // initialize visibility system
    for cell in result.cells:
        // let the goal be visible
        if not cell.visibility:
            cell.visibility = false

        // all cells start invisible
        cell.visibility = false

    result.camera_position = PLAYER.pos
    const c = grid_cell_world_xy(result, PLAYER.pos)
    c.visibility = true

    result.movement_tiles = make_movement_grid(result)

    return result

def make_movement_grid(game_grid):
    const g_size = game_grid.size

    let result = make_grid(
        g_size*2,
        make_cell,
        CELL_SIZE_PX/2,
        GRID_CENTER_px,
    )

    for move_cell in result.cells:
        const move_cell_coords = move_cell.coord

        assert(move_cell.pos != nil)

        // check if this tile is blocked by something
        if grid_cell_xy(game_grid, to_game_coord(move_cell_coords)).occupied_by:
            move_cell.mask = 0b1111
            continue

        move_cell.mask = 0b0000

        // check cardinal neighbors
        // mask layout:
        // up down left right

        if grid_cell_xy(game_grid, to_game_coord(move_cell_coords + xy(0,1))).occupied_by:
            move_cell.mask = move_cell.mask bitor 0b1000

        if grid_cell_xy(game_grid, to_game_coord(move_cell_coords + xy(0,-1))).occupied_by:
            move_cell.mask = move_cell.mask bitor 0b0100

        if grid_cell_xy(game_grid, to_game_coord(move_cell_coords + xy(-1,0))).occupied_by:
            move_cell.mask = move_cell.mask bitor 0b0010

        if grid_cell_xy(game_grid, to_game_coord(move_cell_coords + xy(1,0))).occupied_by:
            move_cell.mask = move_cell.mask bitor 0b0001

    return result

def to_game_coord(from_move_coord):
    return xy(
        floor(from_move_coord.x/2),
        floor(from_move_coord.y/2),
    )


def update_visibility(level):
    // check visibility to the player
    const player_cell = grid_cell_xy(level, level.current_cell)
    for cell in level.cells:
        if cell.visibility:
            continue

        // is there a path to the player?
        if has_route_to_cell_through(level, cell, player_cell):
            cell.visibility = true

    for goal in level.goals:
        for cell in level.cells:
            if cell.visibility:
                continue

            // is there a path to the goal?
            if has_route_to_cell_through(level, cell, goal):
                cell.visibility = true


let pos = xy(SCREEN_SIZE.x / 2, 132)
let flip = xy(1, 1)


def move_object(old_cell, new_cell):
    new_cell.occupied_by = old_cell.occupied_by
    new_cell.occupied_by.pos = new_cell.pos
    // @feature PUSH LIMIT -- this is part of the push limit code
    // if new_cell.occupied_by.frame != nil:
    //     new_cell.occupied_by.frame += 1
    old_cell.occupied_by = nil


def update_player_pos(input, grid):
    PLAYER.vel.x = accelerator_update(PLAYER.accel.x, joy.x)
    PLAYER.vel.y = accelerator_update(PLAYER.accel.y, joy.y)
    debug_watch(PLAYER.vel)


def handle_player_collision(play, contacts):
    const cell_play = grid_cell_world_xy(GAME_GRID, play.pos)
    let push_dir = xy(0, 0)

    if joy.x == 0:
        PLAYER.push_counter.x = 0
    if joy.y == 0:
        PLAYER.push_counter.y = 0

    if abs(PLAYER.vel.x) < 0.001:
        PLAYER.vel.x = 0
    if abs(PLAYER.vel.y) < 0.001:
        PLAYER.vel.y = 0

    PLAYER.accel.x.current_velocity = PLAYER.vel.x
    PLAYER.accel.y.current_velocity = PLAYER.vel.y

    const contact = contacts[0]
    if not contact:
        return

    const entB = contact.entityB

    const cell_entB = grid_cell_world_xy(GAME_GRID, entB.pos)
    if entB.overlap_fn:
        entB.overlap_fn(cell_entB)

        // might not be needed in cases when something could be bumped AND
        // pushed -- but doing either or for now for simplicity
        return

    if sign(cell_entB.coord.x - cell_play.coord.x) == sign(joy.x):
        if PLAYER.push_counter.x == 0:
            PLAYER.push_counter.x = mode_frames
        push_dir.x = sign(cell_entB.coord.x - cell_play.coord.x)
    else:
        PLAYER.push_counter.x = 0

    if sign(cell_entB.coord.y - cell_play.coord.y) == sign(joy.y):
        if PLAYER.push_counter.y == 0:
            PLAYER.push_counter.y = mode_frames
        push_dir.y = sign(cell_entB.coord.y - cell_play.coord.y)
    else:
        PLAYER.push_counter.y = 0

    if (
            PLAYER.push_counter.x > 0 
            and mode_frames - PLAYER.push_counter.x > PUSH_TIME
    ):
        PLAYER.push_counter.x = 0
        push_thing_in(cell_entB.coord, xy(push_dir.x, 0))
    if (
            PLAYER.push_counter.y > 0
            and mode_frames - PLAYER.push_counter.y > PUSH_TIME
    ):
        PLAYER.push_counter.y = 0
        push_thing_in(cell_entB.coord, xy(0, push_dir.y))


def draw_player(play):
    play.angle = 0
    play.sprite = (
        if magnitude(play.vel) > 0 
        then astronaut.run[floor(mode_frames/4) mod 2] 
        else astronaut.idle[0]
    )

    const flip = xy(if play.vel.x < 0 then -1 else 1, 1)
    play.scale = flip
    draw_entity(play)


def push_thing_in(new_cell_loc, movedir):
    const new_cell = grid_cell_xy(GAME_GRID, new_cell_loc)

    if not new_cell:
        return

    // allow one push if nothing is on the other side of the block
    const cell_past_push_loc = new_cell_loc + movedir
    const cell_past_push = grid_cell_xy(GAME_GRID, cell_past_push_loc)

    if (
            cell_past_push 
            and not cell_past_push.occupied_by
            and (
                new_cell.occupied_by.pushes == nil
                or new_cell.occupied_by.pushes > 0
            )
    ):
        if new_cell.occupied_by.pushes != nil:
            // @feature PUSH LIMIT -- this is part of the push limit code
            // new_cell.occupied_by.pushes -= 1
            move_object(new_cell, cell_past_push)

    update_visibility(GAME_GRID)

def update_player_pos_discrete(input, grid):
    const movedir = xy(input.xx, input.yy)
    const new_cell_loc = grid.current_cell + movedir
    const new_cell = grid_cell_xy(GAME_GRID, new_cell_loc)


    const old = grid_cell_xy(grid, grid.current_cell)

    if new_cell: 
        if not new_cell.occupied_by:
            move_object(old, new_cell)
            grid.current_cell = new_cell_loc
            return
        if new_cell.occupied_by.overlap_fn:
            new_cell.occupied_by.overlap_fn(new_cell)
            return

    // allow one push if nothing is on the other side of the block
    const cell_past_push_loc = new_cell_loc + movedir
    const cell_past_push = grid_cell_xy(GAME_GRID, cell_past_push_loc)

    if (
            cell_past_push 
            and not cell_past_push.occupied_by
            and (
                new_cell.occupied_by.pushes == nil
                or new_cell.occupied_by.pushes > 0
            )
    ):
        if new_cell.occupied_by.pushes != nil:
            // @feature PUSH LIMIT -- this is part of the push limit code
            // new_cell.occupied_by.pushes -= 1
            move_object(new_cell, cell_past_push)

        move_object(old, new_cell)
        grid.current_cell = new_cell_loc


let UNDOSTACK = []
let LAST_UNDO_HASH = nil
def grid_hash(game_grid):
    return hash(unparse(asciify_level(game_grid)))

def push_undo(game_grid):
    LAST_UNDO_HASH = grid_hash(game_grid)
    push(UNDOSTACK, deep_clone(game_grid))
    if size(UNDOSTACK) > UNDOSTACK_SIZE_LIMIT:
        pop_front(UNDOSTACK)
    debug_print("pushed to undostack, size: " + size(UNDOSTACK))

// load the level
let CURRENT_LEVEL = 0
GAME_GRID = load_level_by_number(LEVELS.level_order, CURRENT_LEVEL) 

update_visibility(GAME_GRID)

enter
────────────────────────────────────────────────────────────────────────
debug_print("cell", GAME_GRID.current_cell)

frame
────────────────────────────────────────────────────────────────────────
set_background(COLORS.bg)
        
// screen-anchored text
set_camera(xy(0, 0))
let txt = "(a): undo"
if GAME_GRID.player_has_grabber:
    txt += " (b): pull"
draw_text(
    font,
    replace(txt, joy.prompt),
    xy(SCREEN_SIZE.x/2, SCREEN_SIZE.y-2),
    COLORS.text,
    nil,
    nil,
    "center",
    "bottom",
    11
)

draw_text(
    font,
    "Level "+ CURRENT_LEVEL + ": " + LEVELS.level_order[CURRENT_LEVEL],
    xy(SCREEN_SIZE.x/2, SCREEN_SIZE.y-16),
    COLORS.text,
    nil,
    nil,
    "center",
    "bottom",
    11
)

draw_text(
    font,
    CREDITS.title,
    xy(SCREEN_SIZE.x/2, 2),
    COLORS.text,
    nil,
    nil,
    "center",
    "top",
    11
)

debug_watch(GAME_GRID.size - CAMERA_EASE_BORDER)
debug_watch(GAME_GRID.size)
const camera_target_cell = clamp(
    grid_coord_xy_from_wpos(GAME_GRID, PLAYER.pos), // 17, 6
    CAMERA_EASE_BORDER, // 54 8
    GAME_GRID.size - CAMERA_EASE_BORDER // 1, 7
)
debug_watch(camera_target_cell)

const camera_target_position = (
    grid_cell_xy(GAME_GRID, camera_target_cell).pos 
    - SCREEN_SIZE/2
)
debug_watch(camera_target_position)

// camera tries to frame the player
GAME_GRID.camera_position = lerp(
    GAME_GRID.camera_position,
    camera_target_position,
    CAMERA_EASE_AMOUNT
)

// camera-anchored game board
set_camera(GAME_GRID.camera_position)

// @TODO: remove this
debug_watch(GAME_GRID.current_cell)
debug_watch(size(UNDOSTACK))

let sprite = astronaut.idle[0]

update_player_pos(joy, GAME_GRID)
physics_simulate(PHYSICS)
const contacts = physics_entity_contacts(PHYSICS, PLAYER)

handle_player_collision(PLAYER, contacts)
// update_visibility(GAME_GRID)
GAME_GRID.player_cell = grid_coord_xy_from_wpos(GAME_GRID, PLAYER.pos)
GAME_GRID.current_hash = grid_hash(GAME_GRID)

if GAME_GRID.current_hash != LAST_UNDO_HASH:
    push_undo(GAME_GRID)

// update the movement grid
GAME_GRID.movement_tiles = make_movement_grid(GAME_GRID)

if joy.aa:
    if size(UNDOSTACK) > 0:
        debug_print("Undo")
        physics_remove_all(PHYSICS)
        physics_add_entity(PHYSICS, PLAYER)

        if size(UNDOSTACK) > 1:
            pop(UNDOSTACK)
        GAME_GRID = deep_clone(UNDOSTACK[size(UNDOSTACK) - 1])
        LAST_UNDO_HASH = GAME_GRID.current_hash
        PLAYER.pos = grid_cell_xy(GAME_GRID, GAME_GRID.player_cell).pos
        for cell in GAME_GRID.cells:
            if cell.occupied_by:
                physics_remove_entity(PHYSICS, cell.occupied_by)
                physics_add_entity(PHYSICS, cell.occupied_by)
    debug_print(size(UNDOSTACK))
else if joy.bb and GAME_GRID.player_has_grabber:
    player_fn_pull(GAME_GRID)

// draw_rect(GRID_CENTER_px, GAME_GRID.size_px, COLORS.bg_grid)


const DUST_TO_REMOVE = []
for d at i in DUST:
    draw_disk(d.p, 2, rgb(0.2, 0.2, 0.2))
    d.p = d.p + d.d

    if mode_frames + 1 - d.f > d.l:
        push(DUST_TO_REMOVE, i)

for i in reversed(DUST_TO_REMOVE):
    remove_key(DUST, i)

// draw the grid
const player_cell = grid_coord_flat_from_wpos(GAME_GRID, PLAYER.pos)
for c in GAME_GRID.cells:
    if not DEBUG_DISABLE_VISIBILITY and not c.visibility:
        draw_rect(c.pos, xy(16,16), COLORS.bg)
        continue
    else:
        // let spr_ind = c.flat mod size(ground_16_sprite)
        let spr_ind = 72 + (c.flat mod 4)
        // let spr_ind = 0
        draw_sprite(
            ground_16_sprite[spr_ind][0],
            c.pos,
        )

    if c.occupied_by:
        if c.occupied_by != "player":
            draw_entity(c.occupied_by)
    else:
        if DEBUG_DRAW_CELL_NUMBERS:
            draw_text(
                font,
                unparse(c.flat),
                c.pos,
                rgb(1,1,1),
                nil,
                rgb(0.2, 0.2, 0.2),
                "center",
                "center",
                0
            )
    
    if DEBUG_DRAW_PLAYER_CELL and player_cell == c.flat:
        draw_rect(c.pos, CELL_SIZE_PX, nil, rgb(1, 0, 0))

if DEBUG_DRAW_MOVEMENT_CELLS:
    for cell in GAME_GRID.movement_tiles.cells:
        if cell.mask bitand 0b1111:
            let c = rgb(0.5, 0.5, 0.5)
            if cell.mask bitand 0b1000:
                c.r = 0
            else if cell.mask bitand 0b0100:
                c.r = 1
            if cell.mask bitand 0b0010:
                c.g = 1
            else if cell.mask bitand 0b0001:
                c.g = 0

            if cell.mask == 0b1111:
                c = rgb(0,0,0)

            draw_rect(
                cell.pos,
                GAME_GRID.movement_tiles.cell_size_px,
                nil,
                c,
            )

draw_player(PLAYER)

debug_watch(asciify_level(GAME_GRID))

// for thing in LAST_FOUND:
//     draw_disk(grid_cell_xy(GAME_GRID, thing).pos, 5, rgb(1,0,0))
debug_watch(DUST)
