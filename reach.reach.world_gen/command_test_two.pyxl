init
────────────────────────────────────────────────────────────────────────
def say_hello():
    debug_print("hello")

def end_turn():
    debug_print("ending turn")
    push_end_command(lock_input_cmd())
    push_end_command(transition_command("their turn", ACTIVE_ENEMY_COLOR))
    push_end_command(command_fn_immediate(say_hello, "enemy_hello"))
    push_end_command(transition_command("your turn", ACTIVE_COLOR))
    push_end_command(unlock_input_cmd())

let inputs = [
    ["(a)", "aa", "hello", say_hello],
    ["(b)", "bb", "end turn", end_turn],
]

def draw_menu():
    let input_string = []
    for input in inputs:
        push(input_string, replace_prompt(input[0] + ": " + input[2]))

    draw_text(
        font,
        join(
            input_string,
            "\n"
        ),
        xy(0, 0),
        rgb(1,1,1)
    )

    let command_names = ["CMD QUEUE:"]
    for cmd in COMMAND_QUEUE:
        push(command_names, cmd.name)

    draw_text(
        font,
        join(command_names, "\n"),
        -SCREEN_SIZE/2,
        rgb(0.2, 0.2, 0.2),
        nil,
        nil,
        "left",
        "top",
    )

    let undo_names = ["UNDO QUEUE:"]
    for cmd in UNDO_QUEUE:
        push(undo_names, cmd.name)

    draw_text(
        font,
        join(undo_names, "\n"),
        xy(SCREEN_SIZE.x,-SCREEN_SIZE.y)/2,
        rgb(0.2, 0.2, 0.2),
        nil,
        nil,
        "right",
        "top",
    )


let ALLOW_INPUT = false
def transition_command(text, banner_color, end_function):
    // state for the transition
    let in_progress = false
    let need_to_start = true

    def wrapped_end():
        in_progress = false
        if end_function:
            end_function()

        debug_print("done")

    def is_transitioning(ent):
        if need_to_start:
            debug_print("start")
            start_transition(text, banner_color, wrapped_end)
            need_to_start = false
            in_progress = true

        if not in_progress:
            ent.done = true


    return {
        name: "TRANSITION: " + text,
        update: is_transitioning,
        undo: "foo"
    }

def player_input_test():
    if not ALLOW_INPUT:
        return

    for input in inputs:
        if joy[input[1]]:
            input[3]()

def lock_input():
    ALLOW_INPUT = false
def unlock_input():
    ALLOW_INPUT = true

def lock_input_cmd():
    return command_fn_immediate(lock_input, "lock_input")

def unlock_input_cmd():
    return command_fn_immediate(unlock_input, "unlock_input")

def push_end_blocking_command(cmd):
    push_end_command(lock_input_cmd())
    push_end_command(cmd)
    push_end_command(unlock_input_cmd())

enter
────────────────────────────────────────────────────────────────────────
push_end_blocking_command(transition_command("your turn", ACTIVE_COLOR))

frame
────────────────────────────────────────────────────────────────────────
set_transform(SCREEN_SIZE/2)

draw_menu()
player_input_test()
update_command_queue()
